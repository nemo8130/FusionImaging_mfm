    % runcalNNnew_oneIm_minmax: Program to plot Intensity vs. Lift-height for a given
    % sample (MFM). For example: APTES; 
    % This program is to be run after running objectdetect.m on all lift-height
    % MFM images for a given sample (e.g., APTES)
    % The inputs to this program are the outputs generated by objectdetect.m 
    % There are essentially four inputs:
    %
    % 1. A cell array containg all selected objects (returned as the
    % variable 'Graygrain_whole_selected' by objectdetect)  
    % whos Graygrain_whole_selected
    %   Name                            Size               Bytes  Class     Attributes
    %  Graygrain_whole_selected      520x516            2146560  double    
    %
    % 2. The outfile (Extention: .obj) generated by objectdetect.m corresponding to the FIRST lift-height image
    %    containing tabulated features for the selected objects 
    %
    % EXAMPLE: 
    % !head aptes_010_obj.tif.obj.scaled_minmax
    %     %iobj     centroid_xy    Inten_med   Area_raw roundedness  perimeter Equiv_Diam   Max_Diam   Solidity
    %     1   10.833   31.978      0.009    279.000      1.514     75.134     18.712     26.627      0.779
    %     2   13.211   53.108      0.004    208.375      1.243     92.064     16.116     24.042      0.616
    %     3    7.089  162.064      0.005    206.250      1.629     71.388     16.037     23.770      0.732
    %     4    5.220  177.080      0.002     52.125      1.531     34.280      7.979     13.892      0.676
    %     5   24.381  212.099      0.017    785.375      2.394    179.744     31.494     56.080      0.694
    %     6   24.743  234.239      0.011    228.750      3.076    114.078     16.963     41.049      0.569
    %     7   14.856  306.492      0.005    443.250      2.087    120.240     23.642     38.328      0.762
    %     9    7.965  197.070      0.011     87.875      2.072     41.103     10.464     14.866      0.835
    %    11   12.800  116.055      0.004     56.375      1.280     35.024      8.368     10.440      0.733
    %
    % 3. A text file containing all the outfile names (.obj)
    % EXAMPLE: 
    % !cat aptes_new.list
    % aptes_010_obj.tif.obj.scaled_minmax
    % aptes_020_obj.tif.obj.scaled_minmax
    % aptes_030_obj.tif.obj.scaled_minmax
    % aptes_040_obj.tif.obj.scaled_minmax
    % aptes_050_obj.tif.obj.scaled_minmax
    % aptes_060_obj.tif.obj.scaled_minmax
    % aptes_070_obj.tif.obj.scaled_minmax
    % 
    % The forth option fopt will perform a polynomial fit if set to 1 or a
    % sigmoid / hyperbolic fit otherwise
    %
    % USAGE: runcalNNnew_oneIm_minmax(Graygrain_whole_selected,file1,listfile,fopt) 
    % EXAMPLE: runcalNNnew_oneIm_minmax(Graygrain_whole_selected,'aptes_010_obj.tif.obj.scaled_minmax','aptes_newMM.list',1) 
    %    
    %
    function runcalNNnew_oneIm_minmax(Graygrain_whole_selected,file1,listfile,fopt)
    
    list=importdata(listfile);
    dat1h=importdata(file1);
    dat1=dat1h.data;
    Itarg=abs(dat1(:,4));
    %Itarg=dat1(:,4);
    iitarg = [1:length(Itarg)]';

    whos iitarg Itarg

    it=nan(7,100);
    it(1,:)=1;
    int2=nan(7,100);
    int2(1,[1:length(Itarg)])=Itarg'

    for kk = 2:length(list)-1
        file2=list(kk,:);
        ff1 = char(file1);
        ff2 = char(file2);    
        fprintf('%s %s\n',ff1,ff2)
        [ii,Inten1,Inten2]=calNN(ff1,ff2);  
        length(ii);
        length(Inten1);
        length(Inten2);
        ins=intersect(iitarg,ii);
        Istore=Itarg(ins);   

        for ix = 1:length(ii)
            it(kk,ii(ix))=1;
            %int1(kk-1,ii(ix))=Inten1(ix);
            int2(kk,ii(ix))=Inten2(ix);
            %plot3(kk-1,ii(ix),Inten2(ix),'o')        
        end
        length(Istore)
        length(Inten2)
    end

    %int2
    close all;
    xax = [1:7].*10;
    yax = [1:length(dat1)];

    whos xax yax int2
    dd=surf(yax,xax,int2);
    ylabel 'Lift Height (mic.M)'
    xlabel 'Object No'
    zlabel '|Scaled Intensity|'
    title 'APTES'
    set (gca,'FontSize',20)
    colorbar

    figure

    ic=0;
    for ik = 1:length(dat1)
        cntI(ik)=length(find(int2(:,ik)>0));
        if (cntI(ik)>=6)
            ic=ic+1;
        end
    end

    %close all;

    disp(ic)

    fno=[];
    cc=0;
    for i = 1:2:length(dat1)
        for j = (i+2)-1;
            cc=cc+1;
            for k = i:j
                fno=[fno;cc];
            end
        end
    end

%     img=strrep(file1,'.obj.scaled_minmax','');
%     img='aptes_ref.png';
%     A=rgb2gray(imread(img));
    
    objsel = [];
    ic=0;
    for ik = 10:50%1:length(dat1)
        cntI(ik)=length(find(int2(:,ik)>0));
        if (cntI(ik)>=6)
            objsel = [objsel;ik];
            ic=ic+1;
            fprintf('ik= %d\n',ik)
            Ifn=int2(:,ik);
            xx=find(Ifn>0);
            xxf=xx.*10;
            Ifns = Ifn(xx)            
            figure(fno(ic));
            icn=ic-((fno(ic)-1)*2);
            fprintf('%d %d\n',ic,icn);
            oe=oddOReven(ic);
            
            if (oe == 'O')
                subplot(2,2,1)            
            elseif (oe == 'E')
                subplot(2,2,3)
            end    

            imagesc(Graygrain_whole_selected)
            colormap('gray'); axis equal; axis([0.5 518 0 500])
            hold on
            xm=dat1(ik,2);
            ym=dat1(ik,3);
            rad=dat1(ik,9)/2;
            [XXf YYf]=open_circle(xm,ym,rad);
            plot(XXf,YYf,'y.','Markersize',1.0)
            text(xm+2,ym-5,num2str(ik),'FontSize',15,'Color','y')
            
            oe=oddOReven(ic);
            
            if (oe == 'O')
                subplot(2,2,2)            
            elseif (oe == 'E')
                subplot(2,2,4)
            end 
            
            plot(xxf,Ifns,'o',...
                    'MarkerEdgeColor','k',...
                    'MarkerFaceColor',[.49 1 .63],...
                    'MarkerSize',5.0)
            xlim([10 60])
            %ylim([0 max(Ifns)+100])
            xxf_ext = [0:100];  
            
            if (fopt==1)
                P=polyfit(xxf,Ifns,2);
                Ifit=P(1)*xxf_ext.^2 + P(2)*xxf_ext + P(3);    
                Ifit_r2=P(1)*xxf.^2 + P(2)*xxf + P(3); 
                [r2 rmsef]=rsquare(Ifns,Ifit_r2);
            else
                [k1_min k2_min n_opt r2 rmsef]=sighypfit(xxf,Ifns,0);
                Ifit=k1_min*xxf_ext.^n_opt./(k2_min+xxf_ext.^n_opt);
            end
            
            hold on
            
            plot(xxf_ext,Ifit,'b--')             
            xlabel 'Lift-Height (mic.M)'
            ylabel 'Scaled Intensity'
            title (['Obj:',num2str(ic),' (Ref.',num2str(ik),')'])  
            
            if (fopt==1)
                legend(strcat(['Fit: Quadratic Polynomial' ' ;R^2 = ' num2str(r2) '; RMSE = ' num2str(rmsef)]),'Location','Best')
            else
                legend(strcat(['Fit: Sigmoidal / Hyperbolic' '; N=' num2str(n_opt) ' ;R^2 = ' num2str(r2) '; RMSE = ' num2str(rmsef)]),'Location','Best')
            end                       
        end
    end

    %lf=fno(ic);    
    return
    end
    
%========================= END OF MAIN FUNCTION ===========================

    function [ii,I1,I2]=calNN(file1,file2)

    dat1h = importdata(file1);
    dat2h = importdata(file2);

    dat1=dat1h.data;
    dat2=dat2h.data;

    Inten1 = abs(dat1(:,4));
    Inten2 = abs(dat2(:,4));

    %=========================== Target vs. Neighbor ==========================

    ind2 = [];
    f1 = [];

    for i =1:length(dat1)
        x1 = dat1(i,2);
        y1 = dat1(i,3);
        xnn = 999.999;
        ynn = 999.999;
        dist_min = 10000.000;
        ind2(i)=0;
        f1(i)=0;

        for j =1:length(dat2)
            x2 = dat2(j,2);
            y2 = dat2(j,3);
            dist = sqrt((x1-x2)^2 + (y1-y2)^2);
            if (dist <= dist_min)
                xnn = x2;
                ynn = y2;
                dist_min = dist;
                ind2(i)=j;
            end
        end

        if (dist_min <= 20.0)
    %        fprintf ('%10.3f %10.3f %10.3f %10.3f %15.5f\n',x1,y1,xnn,ynn,dist_min);
            f1(i)=1;
        end    
    end

    %========================== Neighbor vs. Target ===========================

    ind1 = [];
    f2 = [];

    for i =1:length(dat2)
        x2 = dat2(i,2);
        y2 = dat2(i,3);
        xnn = 999.999;
        ynn = 999.999;
        dist_min = 10000.000;
        ind1(i)=0;
        f2(i)=0;

        for j =1:length(dat1)
            x1 = dat1(j,2);
            y1 = dat1(j,3);
            dist = sqrt((x2-x1)^2 + (y2-y1)^2);
            if (dist <= dist_min)
                xnn = x1;
                ynn = y1;
                dist_min = dist;
                ind1(i)=j;
            end
        end

        if (dist_min <= 20.0)
    %        fprintf ('%10.3f %10.3f %10.3f %10.3f %15.5f\n',x2,y2,xnn,ynn,dist_min);
            f2(i)=1;
        end
    end

    %=========================================================================

    %length(ind1)
    %length(ind2)
    %intersect(ind1,ind2)

    hold on

    XXt = [];
    YYt = [];
    XXn = [];
    YYn = [];

    ii = [];
    I1 = [];
    I2 = [];

    for i = 1:length(dat1)
        nn1=ind2(i);
        for j = 1:length(dat2)        
            if (j==nn1)
                nn2=ind1(j);
            end
        end
        
        XX = [];YY = [];
        
        if (nn2==i & f1(i)==1) 
            dmin = sqrt((dat1(i,2)-dat2(nn1,2))^2 + (dat1(i,3)-dat2(nn1,3))^2);  
            
    %       Mutual Pairing 
    %       fprintf ('%5d %5d %10.3f %10.3f %10.3f %10.3f  %15.5f  %12.2f  %12.2f\n',i,nn1,dat1(i,2),dat1(i,3),dat2(nn1,2),dat2(nn1,3),dmin,Inten1(i),Inten2(nn1));

            ii = [ii;i];
            I1 = [I1;Inten1(i)];
            I2 = [I2;Inten2(i)];

            XXt = [XXt;dat1(i,2)];
            YYt = [YYt;dat1(i,3)];

            XXn = [XXn;dat2(nn1,2)];
            YYn = [YYn;dat2(nn1,3)];

            XX = [dat1(i,2);dat2(nn1,2)];
            YY = [dat1(i,3);dat2(nn1,3)];

            plot(XX,YY,'k-','LineWidth',1.5)
            text(dat1(i,2)+1,dat1(i,3)+1,num2str(i),'FontSize',15)
        end
    end

    plot(XXt,YYt,'ro','MarkerSize',10)
    plot(XXn,YYn,'bo','MarkerSize',10)

    end

%==========================================================================
    
    
function [XXf YYf] = open_circle(xo,yo,rad)
    XXf = [];
    YYf = [];
    deg2rad = pi/180.0;    
    for th = 0:2.5:360
        th_rad = th*deg2rad;
        xc = rad*cos(th_rad);
        yc = rad*sin(th_rad);
        XXf = [XXf;(xc+xo)];
        YYf = [YYf;(yc+yo)];
    end
end

function oe = oddOReven(n)

fact = factor(n);
flag = 0;

for i = 1:length(fact)
    if (fact(i)==2)
        flag = 1;
    end
end
        if (flag == 1)
            oe = 'E';    
            %fprintf('Even\n');
        else
            oe = 'O';
            %fprintf('Odd\n');
        end
end

% Hyperbolic / Sigmoidal Fitting 
% USAGE: [k1_min k2_min n_opt Rsq rmsef]=hypfit(xx,yy,figopt)
% figopt=1 will make a plot or remain innert otherwise
function [k1_min k2_min n_opt Rsq rmsef]=sighypfit(xx,yy,figopt)

%xx = [1:6];
%yy = [0.0040;0.5400;0.6390;0.6220;0.6220;0.7760]';

% figure
% hold on

rmse_min = 100000.000;
k1_min=0;
k2_min=0;
n_opt=1;

for k1 = 0.05:0.05:20
    for k2 = 0.05:0.05:20
        for n=1:5
            yf=k1*xx.^n./(k2+xx.^n);
            %plot(xx,yy,'ko',xx,yf,'--')
            rmse=sqrt(sum((yf-yy).^2)/length(yy));            
            if (rmse <= rmse_min)
                rmse_min=rmse;
                k1_min=k1;
                k2_min=k2;
                n_opt=n;
            end
        end
    end
end

% rmse_min
% k1_min
% k2_min
% n_opt

yfn=k1_min*xx.^n_opt./(k2_min+xx.^n_opt)

    %[r2 rmsef]=rsquare(yy,yfn);           % No need to call anymore 
    
    rmsef=rmse_min;

    SSres=sum((yfn(:)-yy(:)).^2);       % Residual Sum of Squares 
    SStot=sum((yy(:)-mean(yy)).^2)      % Total Sum of Squares. (var(yy)*(length(yy)-1))
    SSreg=sum((yfn(:)-mean(yfn)).^2);     % Explained Sum of Squares (var(yfn)*length(yfn))
    Rsq=1-(SSres/SStot)                 % Co-efficient of determination / Goodness of fit 
    
    if (figopt==1)
        figure
        plot(xx,yy,'ko',xx,yfn,'--')
        legend(strcat(['Fit:Y=k1*x^N/(k2+x^N)' '; N=' num2str(n_opt) ' ;R^2 = ' num2str(Rsq) '; RMSE = ' num2str(rmsef)]),'Location','Best')
    end
    
end

function [r2 rmse] = rsquare(y,f,varargin)
% Compute coefficient of determination of data fit model and RMSE
%
% [r2 rmse] = rsquare(y,f)
% [r2 rmse] = rsquare(y,f,c)
%
% RSQUARE computes the coefficient of determination (R-square) value from
% actual data Y and model data F. The code uses a general version of 
% R-square, based on comparing the variability of the estimation errors 
% with the variability of the original values. RSQUARE also outputs the
% root mean squared error (RMSE) for the user's convenience.
%
% Note: RSQUARE ignores comparisons involving NaN values.
% 
% INPUTS
%   Y       : Actual data
%   F       : Model fit
%
% OPTION
%   C       : Constant term in model
%             R-square may be a questionable measure of fit when no
%             constant term is included in the model.
%   [DEFAULT] TRUE : Use traditional R-square computation
%            FALSE : Uses alternate R-square computation for model
%                    without constant term [R2 = 1 - NORM(Y-F)/NORM(Y)]
%
% OUTPUT 
%   R2      : Coefficient of determination
%   RMSE    : Root mean squared error
%
% EXAMPLE
%   x = 0:0.1:10;
%   y = 2.*x + 1 + randn(size(x));
%   p = polyfit(x,y,1);
%   f = polyval(p,x);
%   [r2 rmse] = rsquare(y,f);
%   figure; plot(x,y,'b-');
%   hold on; plot(x,f,'r-');
%   title(strcat(['R2 = ' num2str(r2) '; RMSE = ' num2str(rmse)]))
%   
% Jered R Wells
% 11/17/11
% jered [dot] wells [at] duke [dot] edu
%
% v1.2 (02/14/2012)
%
% Thanks to John D'Errico for useful comments and insight which has helped
% to improve this code. His code POLYFITN was consulted in the inclusion of
% the C-option (REF. File ID: #34765).

if isempty(varargin); c = true; 
elseif length(varargin)>1; error 'Too many input arguments';
elseif ~islogical(varargin{1}); error 'C must be logical (TRUE||FALSE)'
else c = varargin{1}; 
end

% Compare inputs
if ~all(size(y)==size(f)); error 'Y and F must be the same size'; end

% Check for NaN
tmp = ~or(isnan(y),isnan(f));
y = y(tmp);
f = f(tmp);

if c; r2 = max(0,1 - sum((y(:)-f(:)).^2)/sum((y(:)-mean(y(:))).^2));
else r2 = 1 - sum((y(:)-f(:)).^2)/sum((y(:)).^2);
    if r2<0
    % http://web.maths.unsw.edu.au/~adelle/Garvan/Assays/GoodnessOfFit.html
        warning('Consider adding a constant term to your model') %#ok<WNTAG>
        r2 = 0;
    end
end

rmse = sqrt(mean((y(:) - f(:)).^2));
end

